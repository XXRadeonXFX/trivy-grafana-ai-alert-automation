
environment {
    CVE_DB_HOST = credentials('CVE_DB_HOST')
    CVE_DB_USERNAME = credentials('CVE_DB_USERNAME')
    CVE_DB_PASSWORD = credentials('CVE_DB_PASSWORD')
    CVE_DB_NAME = credentials('CVE_DB_NAME')
    ALERT_MANAGER_URL= "http://3.216.252.178:8000"
    ALERT_MANAGER_SECRET= "yourapisecret"
}

stages {

    stage("Scan the Image") {
        steps {
            script {
                sh "chmod +x ./trivy/scan.sh"

                // Capture scan output
                def fullOutput = sh(
                    script: """
                        ./trivy/scan.sh \
                            "${ECR_REPO_PATH}" \
                            "${IMAGE_TAG}" \
                            "${ECR_REPO_NAME}" \
                            "${GIT_BRANCH}" \
                            "${env.BUILD_URL}" \
                            "${CVE_DB_HOST}" \
                            "${CVE_DB_USERNAME}" \
                            "${CVE_DB_PASSWORD}" \
                            "${CVE_DB_NAME}" || true
                    """,
                    returnStdout: true
                ).trim()

                env.FULL_RESULT = fullOutput

                echo "Full Scan Output:\n${FULL_RESULT}"

                // Extract build_id as String
                def refBuildId = (fullOutput =~ /build_id:\s+([0-9]+)/)
                env.REF_BUILD_ID = (refBuildId ? refBuildId[0][1] : "").toString()

                echo "Reference Build ID: ${env.REF_BUILD_ID}"

                
            }
        }
    }

    stage("Smart AI Recommendation Generate") {
        when {
            expression { return env.REF_BUILD_ID?.trim() }
        }
        steps {
            sh """
                echo "Initiate AI recommendation API Call..."
                python3 trivy/ai_suggestion.py ${env.REF_BUILD_ID} ${ALERT_MANAGER_URL} ${ALERT_MANAGER_SECRET}
            """
        }
    }

    stage("Validate Vulnerability Outcome") {
        steps {
            script {
                // Keep only the last 3 lines (your summary)
                def result = env.FULL_RESULT.readLines().findAll {
                    it.startsWith("Project:") || it.startsWith("Image:") || it.startsWith("CRITICAL:") || it.startsWith("HIGH:")
                }.join("\n")

                env.SCAN_RESULT = sh(
                    script: "python3 trivy/email_template.py reports/scan-report-${IMAGE_TAG}.json ${env.BUILD_URL}",
                    returnStdout: true
                )
                
                // Fail build if CRITICAL or HIGH issues found
                def criticalMatch = (result =~ /CRITICAL:\s+([0-9]+)/)
                def highMatch     = (result =~ /HIGH:\s+([0-9]+)/)
                
                def criticalCount = criticalMatch ? criticalMatch[0][1].toInteger() : 0
                def highCount     = highMatch ? highMatch[0][1].toInteger() : 0

                if (criticalCount > 0 || highCount > 0) {
                    error("‚ùå Found vulnerabilities (CRITICAL: ${criticalCount}, HIGH: ${highCount}) ‚Äì failing build!")
                }
            }
        }
    }
}

post {
        failure {
            echo 'Build or test failed. Sending notifications...'
            emailext(
    subject: "‚ùå Deployment Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
    body: """\
<html>
<body>
<h3>${env.JOB_NAME} Deployment FAILED ‚ùå</h3>
<p style="font-size:16px; line-height:21px;"><strong>Job:</strong> ${env.JOB_NAME}</p>
<p style="font-size:16px; line-height:21px;"><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
<p style="font-size:16px; line-height:21px;"><strong>Branch:</strong> ${env.GIT_BRANCH}</p>
<p style="font-size:16px; line-height:21px;"><strong>Git Repo:</strong> ${env.GIT_REPO}</p>
<p style="font-size:16px; line-height:21px;"><strong>Docker Image:</strong> ${ECR_REPO_PATH}:${IMAGE_TAG}</p>
<p style="font-size:16px; line-height:21px;"><strong>Failure Time:</strong> ${new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("Asia/Kolkata"))}</p>
<p style="font-size:18px; line-height:25px;"><strong>üîé Trivy Scan Report:</strong></p>
${env.SCAN_RESULT}
<p style="font-size:16px; line-height:21px;"><a href="${env.BUILD_URL}">Click here to view full build logs</a></p>
</body>
</html>
""",
    mimeType: 'text/html',
    to: "${ALERT_EMAIL}"
)
            script {
                sh '''
                    echo "===== Deployment Success Summary ====="
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Docker Image: ${ECR_REPO_PATH}:${IMAGE_TAG}"
                    echo "Deployment Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"

                    echo "===== Remove Old Images except last 2 ====="
                    docker images \
                    ${ECR_REPO_PATH} \
                    --format "{{.Repository}}:{{.Tag}} {{.CreatedAt}}" | \
                    sort -k2 | \
                    head -n -2 2>/dev/null | \
                    cut -d' ' -f1 | \
                    xargs -r docker rmi
                '''
            }

        }
        success {
            echo 'Build and deployment passed successfully!'
            emailext(
    subject: "‚úÖ Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
    body: """\
<html>
<body>
<h3>${env.JOB_NAME} Build & Deployment SUCCEEDED ‚úÖ</h3>
<p style="font-size:16px; line-height:21px;"><strong>Job:</strong> ${env.JOB_NAME}</p>
<p style="font-size:16px; line-height:21px;"><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
<p style="font-size:16px; line-height:21px;"><strong>Branch:</strong> ${env.GIT_BRANCH}</p>
<p style="font-size:16px; line-height:21px;"><strong>Git Repo:</strong> ${env.GIT_REPO}</p>
<p style="font-size:16px; line-height:21px;"><strong>Docker Image:</strong> ${ECR_REPO_PATH}:${IMAGE_TAG}</p>
<p style="font-size:16px; line-height:21px;"><strong>Failure Time:</strong> ${new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("Asia/Kolkata"))}</p>
<p style="font-size:18px; line-height:25px;"><strong>üîé Trivy Scan Report:</strong></p>
${env.SCAN_RESULT}
<p style="font-size:16px; line-height:21px;"><a href="${env.BUILD_URL}">Click here to view full build logs</a></p>
</body>
</html>
""",
    mimeType: 'text/html',
    to: "${ALERT_EMAIL}"
)

            script {
                sh '''
                    echo "===== Deployment Success Summary ====="
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Docker Image: ${ECR_REPO_PATH}:${IMAGE_TAG}"
                    echo "Deployment Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"

                    echo "===== Remove Old Images except last 2 ====="
                    docker images \
                    ${ECR_REPO_PATH} \
                    --format "{{.Repository}}:{{.Tag}} {{.CreatedAt}}" | \
                    sort -k2 | \
                    head -n -2 | \
                    cut -d' ' -f1 | \
                    xargs -r docker rmi
                '''
            }
        }
    }
}
